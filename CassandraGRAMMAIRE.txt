statements
    : statement ( ';' statement )* ';'    <======> Statements : statement';' (statement';')* <===>Statements:(statement';')+
    ;
dml_statements
    : dml_statement (';' dml_statement)* ';' <===> dml_statements : dml_statement ';' (dml_statement';')* <==>dml_statements:(dml_statement';')+
    ;
column_names
    : '(' column_name (',' column_name)* ')'<===>column_names : '(' LIST_COLUMN_NAME ')'
    ;
column_values
    : '(' term (',' term)* ')' <==> column_values :'(' LIST_COLUMN_VALUE ')'
    ;

upsert_options
    : K_USING upsert_option (K_AND upsert_option)* <==> upsert_options : K_USING LIST_UPSERT_OPTION
    ;

update_assignments
    : update_assignment (',' update_assignment)* <==> update_assignments : LIST_UPDATE_ASSIGNMENT
    ;

update_conditions
    : K_IF update_condition (K_AND update_condition)* <==> update_conditions : K_IF LIST_UPDATE_CONDITION 
    ;

where_clause
    : relation (K_AND relation)* <==> where_clause : LIST_RELATION
    ;

delete_conditions
    : K_IF ( K_EXISTS | (delete_condition (K_AND delete_condition)*)) <==> delete_conditions : K_IF ( K_EXISTS | LIST_DELETE_CONDITION )
    ;
-----------------------------------------------------------------------
STATEMENTS : LIST_STATEMENT
DML_STATEMENTS : LIST_DML_STATEMENT
column_name (',' column_name)* : LIST_COLUMN_NAME 
term (',' term)* : LIST_COLUMN_VALUE
upsert_option (K_AND upsert_option)* : LIST_UPSERT_OPTION
update_assignment (',' update_assignment)* : LIST_UPDATE_ASSIGNMENT
update_condition (K_AND update_condition)* : LIST_UPDATE_CONDITION
relation (K_AND relation)* : LIST_RELATION
delete_condition (K_AND delete_condition)* : LIST_DELETE_CONDITION
------------------------------------------------------------------------------------------------------------------------------
			GRAMMAIRE PROGRAMMABLE EN C (La premiere est programmable BISON mais pas en C )
------------------------------------------------------------------------------------------------------------------------------
statements : LIST_STATEMENT
LIST_STATEMENT : statement ';' LIST_STATEMENT_AUX
LIST_STATEMENT_AUX : LIST_STATEMENT | epsilon
statement
    : drop_keyspace_stmt
    | create_keyspace_stmt
    | alter_keyspace_stmt
    | use_stmt
    | create_table_stmt
    | alter_table_stmt
    | drop_table_stmt
    | truncate_table_stmt
    | create_index_stmt
    | drop_index_stmt
    | insert_stmt
    | update_stmt
    | delete_stmt
    | batch_stmt
    ;
dml_statements : LIST_DML_STATEMENT                             // follower : K_APPLY , first : K_BEGIN | K_UNLOGGED | K_COUNTER
LIST_DML_STATEMENT : dml_statement ';' LIST_DML_STATEMENT_AUX
LIST_DML_STATEMENT_AUX : LIST_DML_STATEMENT | epsilon
dml_statement
    : insert_stmt
    | update_stmt
    | delete_stmt
    ;
create_keyspace_stmt
    : K_CREATE K_KEYSPACE if_not_exists? keyspace_name K_WITH properties
    ;

alter_keyspace_stmt
    : K_ALTER K_KEYSPACE keyspace_name K_WITH properties
    ;

drop_keyspace_stmt
    : K_DROP K_KEYSPACE if_exists? keyspace_name
    ;

use_stmt
    : K_USE keyspace_name
    ;

create_table_stmt
    : K_CREATE (K_TABLE | K_COLUMNFAMILY) if_not_exists? table_name column_definitions (K_WITH table_options)?
    ;

alter_table_stmt
    : K_ALTER (K_TABLE | K_COLUMNFAMILY) table_name alter_table_instruction
    ;

alter_table_instruction
    : K_ALTER column_name K_TYPE column_type
    | K_ADD column_name column_type
    | K_DROP column_name
    | K_WITH table_options
    ;

drop_table_stmt
    : K_DROP K_TABLE if_exists? table_name
    ;

truncate_table_stmt
    : K_TRUNCATE table_name
    ;

create_index_stmt
    : K_CREATE (K_CUSTOM)? K_INDEX if_not_exists? index_name? K_ON table_name '(' column_name ')'
      (K_USING index_class (K_WITH index_options)?)?
    ;

drop_index_stmt
    : K_DROP K_INDEX if_exists? index_name
    ;

insert_stmt
    : K_INSERT K_INTO table_name column_names K_VALUES column_values if_not_exists? upsert_options?
    ;

column_names : '(' LIST_COLUMN_NAME ')'				folow :')'
LIST_COLUMN_NAME : column_name LIST_COLUMN_NAME_AUX
LIST_COLUMN_NAME_AUX : ',' LIST_COLUMN_NAME | epsilone

column_values :'(' LIST_COLUMN_VALUE ')'			folow :')'
LIST_COLUMN_VALUE : term LIST_COLUMN_VALUE_AUX
LIST_COLUMN_VALUE_AUX : ',' LIST_COLUMN_VALUE | epsilone
 
upsert_options : K_USING LIST_UPSERT_OPTION			folow :K_SET
LIST_UPSERT_OPTION : upsert_option LIST_UPSERT_OPTION_AUX
LIST_UPSERT_OPTION_AUX: K_AND LIST_UPSERT_OPTION | epsilone

upsert_option
    : K_TIMESTAMP INTEGER
    | K_TTL INTEGER
    ;

index_name
    : IDENTIFIER
    ;

index_class
    : STRING
    ;

index_options
    : K_OPTIONS '=' map
    ;

update_stmt
    : K_UPDATE table_name upsert_options? K_SET update_assignments K_WHERE where_clause update_conditions?
    ;

update_assignments : LIST_UPDATE_ASSIGNMENT				// follow : K_WHERE
LIST_UPDATE_ASSIGNMENT : update_assignment LIST_UPDATE_ASSIGNMENT_AUX
LIST_UPDATE_ASSIGNMENT_AUX : ',' LIST_UPDATE_ASSIGNMENT | epsilone

update_assignment
    : column_name '=' term
    | column_name '=' column_name ('+' | '-') (INTEGER | set | list)
    | column_name '=' column_name '+' map
    | column_name '[' term ']' '=' term
    ;

update_conditions : K_IF LIST_UPDATE_CONDITION				FOLLOW : ';' | K_APPLY
LIST_UPDATE_CONDITION : update_condition LIST_UPDATE_CONDITION_AUX
LIST_UPDATE_CONDITION_AUX : K_AND LIST_UPDATE_CONDITION | epsilone

update_condition
    : IDENTIFIER '=' term
    | IDENTIFIER '[' term ']' '=' term
    ;

where_clause : LIST_RELATION						FOLOW : ";" | K_APPLY
LIST_RELATION : relation LIST_RELATION_AUX
LIST_RELATION_AUX : K_AND LIST_RELATION | epsilone

relation
    : column_name '=' term
    | column_name K_IN '(' (term (',' term)*)? ')'
    | column_name K_IN '?'
    ;

delete_stmt
    : K_DELETE delete_selections? K_FROM table_name
                        (K_USING K_TIMESTAMP INTEGER)?
                        K_WHERE where_clause
                        delete_conditions?
    ;

delete_conditions : K_IF ( K_EXISTS | LIST_DELETE_CONDITION )         FOLLOW :K_APPLY | ';'
LIST_DELETE_CONDITION : delete_condition LIST_DELETE_CONDITION_AUX
LIST_DELETE_CONDITION_AUX : K_AND LIST_DELETE_CONDITION | epsilone

delete_condition
    : IDENTIFIER ('[' term ']')? '=' term
    ;

delete_selections : LIST_DELETE_SELECTION				FOLLOW :K_FROM
LIST_DELETE_SELECTION : delete_selection LIST_DELETE_SELECTION_AUX
LIST_DELETE_SELECTION_AUX : ',' LIST_DELETE_SELECTION | epsilon

delete_selection
    : IDENTIFIER ('[' term ']')?
    ;

batch_stmt
    : K_BEGIN (K_UNLOGGED | K_COUNTER)? K_BATCH batch_options? dml_statements K_APPLY K_BATCH
    ;

batch_options : K_USING LIST_BATCH_OPTION                    
LIST_BATCH_OPTION : batch_option LIST_BATCH_OPTION_AUX
LIST_BATCH_OPTION_AUX : K_AND LIST_BATCH_OPTION | epsilone

batch_option
    : K_TIMESTAMP INTEGER
    ;

table_name
    : (keyspace_name '.')? IDENTIFIER
    ;

column_name
    : IDENTIFIER
    ;

table_options : LIST_TABLE_OPTION					folow : ';'
LIST_TABLE_OPTION : table_option LIST_TABLE_OPTION_AUX
LIST_TABLE_OPTION_AUX: K_AND LIST_TABLE_OPTION | epsilone

table_option
    : property
    | K_COMPACT K_STORAGE
    | K_CLUSTERING K_ORDER
    ;

column_definitions : '(' LIST_COLUMN_DEFINITION ')'
LIST_COLUMN_DEFINITION : column_definition LIST_COLUMN_DEFINITION_AUX
LIST_COLUMN_DEFINITION_AUX : ',' LIST_COLUMN_DEFINITION |epsilon

column_definition
    : column_name column_type (K_STATIC)? (K_PRIMARY K_KEY)?
    | K_PRIMARY K_KEY primary_key
    ;

column_type
    : data_type
    ;

primary_key : '(' LIST_COLUMN_NAME_PRIMARY_KEY ')'
LIST_COLUMN_NAME_PRIMARY_KEY : column_name LIST_COLUMN_NAME_PRIMARY_KEY_AUX
LIST_COLUMN_NAME_PRIMARY_KEY_AUX : ',' LIST_COLUMN_NAME_PRIMARY_KEY | epsilone
//---------------------------------------------------
primary_key : '(' partition_key (',' column_name)* ')'
primary_key : '(' [column_name  | '(' column_name (',' column_name)*] (',' column_name)* ')'
primary_key : '(' column_name (',' column_name)* | '(' column_name (',' column_name)* ')'
primary_key : '(' column_name(',' column_name)* ')'
primary_key : '(' LIST_COLUMN_NAME_PRIMARY_KEY ')'
//---------------------------------------------------

partition_key : column_name | '('LIST_COLUMN_NAME_PRIMARY_KEY ')' <==> partition_key : column_name | primary_key

keyspace_name
    : IDENTIFIER
    ;

if_not_exists
    : K_IF K_NOT K_EXISTS
    ;

if_exists
    : K_IF K_EXISTS
    ;

constant
    : STRING
    | INTEGER
    | FLOAT
    | bool
    | UUID
    | BLOB
    ;

variable
    : '?'
    | ':' IDENTIFIER
    ;

term
    : constant
    | collection
    | variable
    | function
    ;

collection
    : map
    | set
    | list
    ;

map : '{' ( LIST_TERM_MAP)? '}'
LIST_TERM_MAP : term ':' term  LIST_TERM_MAP_AUX
LIST_TERM_MAP_AUX : ',' LIST_TERM_MAP | epsilone

set : '{' (LIST_TERM)? '}'
LIST_TERM : term LIST_TERM_AUX
LIST_TERM_AUX : ',' LIST_TERM | epsilone

list : '[' (LIST_TERM)? ']'

function : IDENTIFIER '(' (LIST_TERM)? ')'

properties : LIST_PROPERTY				FOLOW : K_APPLY | ';'
LIST_PROPERTY : property LIST_PROPERTY_AUX
LIST_PROPERTY_AUX : K_AND LIST_PROPERTY | epsilone

property : property_name '=' property_value

property_name
    : IDENTIFIER
    ;

property_value
    : IDENTIFIER
    | constant
    | map
    ;

data_type
    : native_type
    | collection_type
    | STRING
    ;

native_type
    : 'ascii'
    | 'bigint'
    | 'blob'
    | 'boolean'
    | 'counter'
    | 'decimal'
    | 'double'
    | 'float'
    | 'inet'
    | 'int'
    | 'text'
    | 'timestamp'
    | 'timeuuid'
    | 'uuid'
    | 'varchar'
    | 'varint'
    ;

collection_type
    : 'list' '<' native_type '>'
    | 'set' '<' native_type '>'
    | 'map' '<' native_type ',' native_type '>'
    ;


bool
    : K_TRUE
    | K_FALSE
    ;

